"""
üêπ Aurora P2P Discovery Client
Cliente Python para Discovery Server con sistema de reputaci√≥n integrado
"""

import json
import requests
import time
import threading
from typing import List, Dict, Optional, Callable
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import uuid


@dataclass
class PeerInfo:
    """Informaci√≥n de un peer descubierto"""
    peer_id: str
    address: str
    port: int
    archetypes: List[str]
    last_seen: str
    metadata: Dict = None
    reputation_hint: Dict = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}
        if isinstance(self.last_seen, str):
            self.last_seen_dt = datetime.fromisoformat(self.last_seen.replace('Z', '+00:00'))
        else:
            self.last_seen_dt = self.last_seen
    
    @property
    def age_seconds(self) -> float:
        """Edad del registro en segundos"""
        return (datetime.now() - self.last_seen_dt).total_seconds()
    
    def is_active(self, ttl_seconds: int = 300) -> bool:
        """Verifica si el peer est√° activo seg√∫n TTL"""
        return self.age_seconds < ttl_seconds


@dataclass
class DiscoveryConfig:
    """Configuraci√≥n del cliente Discovery"""
    endpoint: str
    peer_id: str = None
    archetypes: List[str] = None
    heartbeat_interval: int = 30
    ttl_seconds: int = 300
    enable_reputation: bool = True
    auto_heartbeat: bool = True
    
    def __post_init__(self):
        if self.peer_id is None:
            self.peer_id = f"aurora-peer-{uuid.uuid4().hex[:8]}"
        if self.archetypes is None:
            self.archetypes = []


class DiscoveryClient:
    """
    Cliente para Aurora P2P Discovery Server
    
    Features:
    - Registro autom√°tico de peer
    - Heartbeat autom√°tico en background
    - Descubrimiento de peers por archetype
    - Integraci√≥n con sistema de reputaci√≥n
    - Retry autom√°tico con backoff exponencial
    - Thread-safe
    """
    
    def __init__(self, config: DiscoveryConfig, reputation_system=None):
        """
        Args:
            config: Configuraci√≥n del cliente
            reputation_system: Sistema de reputaci√≥n (opcional)
        """
        self.config = config
        self.reputation_system = reputation_system
        self.registered = False
        self.heartbeat_thread = None
        self.heartbeat_stop = threading.Event()
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': f'Aurora-Discovery-Client/1.0 ({self.config.peer_id})'
        })
        
        # Callbacks
        self.on_peer_discovered: Optional[Callable] = None
        self.on_heartbeat_success: Optional[Callable] = None
        self.on_heartbeat_failure: Optional[Callable] = None
        
        # Stats
        self.stats = {
            'heartbeats_sent': 0,
            'heartbeats_failed': 0,
            'peers_discovered': 0,
            'last_discovery': None,
            'uptime_start': datetime.now()
        }
    
    def register(self, address: str, port: int, metadata: Dict = None) -> Dict:
        """
        Registra este peer en el Discovery Server
        
        Args:
            address: Direcci√≥n IP/hostname del peer
            port: Puerto del peer
            metadata: Metadata adicional (opcional)
            
        Returns:
            Respuesta del servidor con confirmaci√≥n y TTL
        """
        payload = {
            'peer_id': self.config.peer_id,
            'address': address,
            'port': port,
            'archetypes': self.config.archetypes,
            'metadata': metadata or {}
        }
        
        response = self._post(f"{self.config.endpoint}/register", payload)
        
        if response.status_code == 200:
            self.registered = True
            
            # Auto-start heartbeat
            if self.config.auto_heartbeat and not self.heartbeat_thread:
                self.start_heartbeat()
            
            print(f"‚úÖ Peer {self.config.peer_id} registrado exitosamente")
            return response.json()
        else:
            raise Exception(f"Error al registrar peer: {response.status_code} - {response.text}")
    
    def discover(self, archetype: str = None, include_reputation: bool = None) -> List[PeerInfo]:
        """
        Descubre peers activos en la red
        
        Args:
            archetype: Filtrar por archetype espec√≠fico (opcional)
            include_reputation: Incluir hints de reputaci√≥n del servidor (opcional)
            
        Returns:
            Lista de peers descubiertos
        """
        if include_reputation is None:
            include_reputation = self.config.enable_reputation
        
        params = {}
        if archetype:
            params['archetype'] = archetype
        if include_reputation:
            params['reputation'] = 'true'
        
        response = self._get(f"{self.config.endpoint}/discover", params=params)
        
        if response.status_code == 200:
            data = response.json()
            peers = [PeerInfo(**peer) for peer in data['peers']]
            
            # Filtrar peers activos
            active_peers = [p for p in peers if p.is_active(self.config.ttl_seconds)]
            
            # Excluir este peer
            active_peers = [p for p in active_peers if p.peer_id != self.config.peer_id]
            
            # Aplicar reputaci√≥n local si est√° disponible
            if self.reputation_system:
                active_peers = self._filter_by_reputation(active_peers)
            
            self.stats['peers_discovered'] = len(active_peers)
            self.stats['last_discovery'] = datetime.now()
            
            if self.on_peer_discovered:
                for peer in active_peers:
                    self.on_peer_discovered(peer)
            
            return active_peers
        else:
            raise Exception(f"Error al descubrir peers: {response.status_code} - {response.text}")
    
    def heartbeat(self) -> Dict:
        """
        Env√≠a heartbeat para mantener registro activo
        
        Returns:
            Respuesta del servidor con timestamp actualizado
        """
        if not self.registered:
            raise Exception("Peer no registrado. Llama a register() primero.")
        
        payload = {'peer_id': self.config.peer_id}
        response = self._post(f"{self.config.endpoint}/heartbeat", payload)
        
        if response.status_code == 200:
            self.stats['heartbeats_sent'] += 1
            if self.on_heartbeat_success:
                self.on_heartbeat_success()
            return response.json()
        else:
            self.stats['heartbeats_failed'] += 1
            if self.on_heartbeat_failure:
                self.on_heartbeat_failure(response)
            raise Exception(f"Error en heartbeat: {response.status_code} - {response.text}")
    
    def health_check(self) -> Dict:
        """
        Verifica estado del Discovery Server
        
        Returns:
            Estado del servidor
        """
        response = self._get(f"{self.config.endpoint}/health")
        return response.json()
    
    def start_heartbeat(self):
        """Inicia heartbeat autom√°tico en background thread"""
        if self.heartbeat_thread and self.heartbeat_thread.is_alive():
            print("‚ö†Ô∏è  Heartbeat ya est√° corriendo")
            return
        
        self.heartbeat_stop.clear()
        self.heartbeat_thread = threading.Thread(target=self._heartbeat_loop, daemon=True)
        self.heartbeat_thread.start()
        print(f"üíì Heartbeat iniciado (intervalo: {self.config.heartbeat_interval}s)")
    
    def stop_heartbeat(self):
        """Detiene heartbeat autom√°tico"""
        if self.heartbeat_thread:
            self.heartbeat_stop.set()
            self.heartbeat_thread.join(timeout=5)
            print("üíî Heartbeat detenido")
    
    def _heartbeat_loop(self):
        """Loop de heartbeat en background"""
        while not self.heartbeat_stop.is_set():
            try:
                self.heartbeat()
            except Exception as e:
                print(f"‚ö†Ô∏è  Error en heartbeat autom√°tico: {e}")
            
            # Sleep con check peri√≥dico para poder interrumpir
            for _ in range(self.config.heartbeat_interval):
                if self.heartbeat_stop.is_set():
                    break
                time.sleep(1)
    
    def _filter_by_reputation(self, peers: List[PeerInfo]) -> List[PeerInfo]:
        """
        Filtra peers usando el sistema de reputaci√≥n local
        
        Args:
            peers: Lista de peers descubiertos
            
        Returns:
            Lista filtrada de peers confiables
        """
        if not self.reputation_system:
            return peers
        
        trusted_peers = []
        for peer in peers:
            decision = self.reputation_system.should_connect_to_peer(peer.peer_id)
            
            if decision['should_connect']:
                trusted_peers.append(peer)
                if decision.get('warning'):
                    print(f"‚ö†Ô∏è  Peer {peer.peer_id}: {decision['reason']}")
            else:
                print(f"üö´ Peer {peer.peer_id} filtrado: {decision['reason']}")
        
        return trusted_peers
    
    def report_interaction(self, peer_id: str, success: bool, interaction_type: str = 'general'):
        """
        Reporta interacci√≥n con peer al sistema de reputaci√≥n
        
        Args:
            peer_id: ID del peer
            success: Si la interacci√≥n fue exitosa
            interaction_type: Tipo de interacci√≥n (tensor_exchange, training, etc.)
        """
        if self.reputation_system:
            self.reputation_system.record_interaction(
                peer_id=peer_id,
                success=success,
                interaction_type=interaction_type
            )
    
    def get_stats(self) -> Dict:
        """Obtiene estad√≠sticas del cliente"""
        uptime = (datetime.now() - self.stats['uptime_start']).total_seconds()
        return {
            **self.stats,
            'uptime_seconds': uptime,
            'uptime_formatted': str(timedelta(seconds=int(uptime))),
            'heartbeat_success_rate': (
                self.stats['heartbeats_sent'] / 
                (self.stats['heartbeats_sent'] + self.stats['heartbeats_failed'])
                if self.stats['heartbeats_sent'] + self.stats['heartbeats_failed'] > 0
                else 0.0
            )
        }
    
    def _get(self, url: str, params: Dict = None, retry: int = 3) -> requests.Response:
        """GET request con retry exponencial"""
        for attempt in range(retry):
            try:
                response = self.session.get(url, params=params, timeout=10)
                return response
            except requests.RequestException as e:
                if attempt == retry - 1:
                    raise
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è  Request fall√≥, reintentando en {wait_time}s... ({attempt + 1}/{retry})")
                time.sleep(wait_time)
    
    def _post(self, url: str, data: Dict, retry: int = 3) -> requests.Response:
        """POST request con retry exponencial"""
        for attempt in range(retry):
            try:
                response = self.session.post(url, json=data, timeout=10)
                return response
            except requests.RequestException as e:
                if attempt == retry - 1:
                    raise
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è  Request fall√≥, reintentando en {wait_time}s... ({attempt + 1}/{retry})")
                time.sleep(wait_time)
    
    def __enter__(self):
        """Context manager support"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Cleanup al salir del context"""
        self.stop_heartbeat()
        self.session.close()


# ============================================================================
# Ejemplo de uso
# ============================================================================

def main():
    """Ejemplo completo de uso del Discovery Client"""
    
    print("üêπ Aurora P2P Discovery Client - Demo")
    print("=" * 60)
    
    # Configuraci√≥n
    config = DiscoveryConfig(
        endpoint="https://YOUR-API-ID.execute-api.us-east-1.amazonaws.com/dev",
        peer_id="demo-peer-001",
        archetypes=["Pepino", "Researcher"],
        heartbeat_interval=30,
        auto_heartbeat=True,
        enable_reputation=True
    )
    
    # Opcional: Integrar sistema de reputaci√≥n
    try:
        from reputation_system import ReputationSystem
        reputation = ReputationSystem()
        print("‚úÖ Sistema de reputaci√≥n cargado")
    except ImportError:
        reputation = None
        print("‚ö†Ô∏è  Sistema de reputaci√≥n no disponible")
    
    # Crear cliente
    with DiscoveryClient(config, reputation_system=reputation) as client:
        
        # Health check
        print("\n1Ô∏è‚É£  Verificando servidor...")
        try:
            health = client.health_check()
            print(f"   Status: {health['status']}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            return
        
        # Registrar peer
        print("\n2Ô∏è‚É£  Registrando peer...")
        try:
            result = client.register(
                address="192.168.1.100",
                port=8080,
                metadata={
                    "version": "1.0.0",
                    "capabilities": ["training", "inference"]
                }
            )
            print(f"   Peer ID: {result['peer_id']}")
            print(f"   TTL expira: {result['ttl_expires']}")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            return
        
        # Callbacks para heartbeat
        def on_heartbeat_ok():
            print("   üíö Heartbeat OK")
        
        def on_heartbeat_fail(response):
            print(f"   üíî Heartbeat fall√≥: {response.status_code}")
        
        client.on_heartbeat_success = on_heartbeat_ok
        client.on_heartbeat_failure = on_heartbeat_fail
        
        # Descubrir peers
        print("\n3Ô∏è‚É£  Descubriendo peers...")
        try:
            peers = client.discover(include_reputation=True)
            print(f"   Encontrados: {len(peers)} peers activos")
            
            for peer in peers:
                print(f"\n   üìç Peer: {peer.peer_id}")
                print(f"      Address: {peer.address}:{peer.port}")
                print(f"      Archetypes: {', '.join(peer.archetypes)}")
                print(f"      Age: {peer.age_seconds:.1f}s")
                
                if peer.reputation_hint:
                    hint = peer.reputation_hint
                    print(f"      Reputation Hint: {hint['score']} {'üÜï' if hint.get('is_new') else 'üëç'}")
        
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        # Simular interacciones
        if peers and reputation:
            print("\n4Ô∏è‚É£  Simulando interacciones...")
            peer = peers[0]
            
            # Interacci√≥n exitosa
            client.report_interaction(peer.peer_id, success=True, interaction_type='tensor_exchange')
            print(f"   ‚úÖ Interacci√≥n exitosa con {peer.peer_id}")
            
            # Verificar reputaci√≥n actualizada
            rep = reputation.calculate_reputation(peer.peer_id)
            print(f"   Score: {rep.score:.2f} (confidence: {rep.confidence:.2f})")
        
        # Stats
        print("\n5Ô∏è‚É£  Estad√≠sticas:")
        stats = client.get_stats()
        print(f"   Uptime: {stats['uptime_formatted']}")
        print(f"   Heartbeats: {stats['heartbeats_sent']} (exitosos)")
        print(f"   Heartbeats fallidos: {stats['heartbeats_failed']}")
        print(f"   Peers descubiertos: {stats['peers_discovered']}")
        print(f"   Success rate: {stats['heartbeat_success_rate']:.1%}")
        
        # Mantener vivo para ver heartbeats
        print("\n6Ô∏è‚É£  Monitoreando heartbeats (Ctrl+C para salir)...")
        try:
            while True:
                time.sleep(5)
                stats = client.get_stats()
                print(f"   üíì Heartbeats: {stats['heartbeats_sent']} | Peers: {stats['peers_discovered']}")
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo...")


if __name__ == "__main__":
    main()
